---
// Bundle optimization component for runtime performance
---

<script>
  import { 
    prioritizeResources, 
    intelligentLoader, 
    bundleAnalyzer, 
    progressiveEnhancer 
  } from '../utils/bundleOptimization';

  class BundleOptimizer {
    private performanceObserver: PerformanceObserver | null = null;
    
    constructor() {
      this.init();
    }
    
    async init(): Promise<void> {
      // Prioritize critical resources immediately
      prioritizeResources();
      
      // Set up performance monitoring
      this.setupPerformanceMonitoring();
      
      // Start intelligent loading based on user behavior
      await this.startIntelligentLoading();
      
      // Progressive enhancement
      await this.applyProgressiveEnhancements();
      
      // Report bundle analytics in development
      if (import.meta.env.DEV) {
        setTimeout(() => bundleAnalyzer.report(), 3000);
      }
    }
    
    private setupPerformanceMonitoring(): void {
      if ('PerformanceObserver' in window) {
        // Monitor resource loading
        this.performanceObserver = new PerformanceObserver((list) => {
          list.getEntries().forEach((entry) => {
            if (entry.entryType === 'resource') {
              const resourceEntry = entry as PerformanceResourceTiming;
              const chunkName = this.extractChunkName(resourceEntry.name);
              
              if (chunkName) {
                bundleAnalyzer.trackLoadTime(chunkName, resourceEntry.duration);
                
                // Estimate size from transfer size
                if (resourceEntry.transferSize) {
                  bundleAnalyzer.trackChunkLoad(chunkName, resourceEntry.transferSize);
                }
              }
            }
          });
        });
        
        this.performanceObserver.observe({ entryTypes: ['resource'] });
      }
    }
    
    private extractChunkName(url: string): string | null {
      // Extract chunk name from URL
      const match = url.match(/_astro\/([^.]+)/);
      return match ? match[1] : null;
    }
    
    private async startIntelligentLoading(): Promise<void> {
      // Delay intelligent loading to not interfere with critical path
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await intelligentLoader.loadBasedOnBehavior();
    }
    
    private async applyProgressiveEnhancements(): Promise<void> {
      // Enhanced animations for capable devices
      await progressiveEnhancer.enhance('animations', async () => {
        if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
          const animationsModule = await import('../styles/enhanced-animations.css');
          document.documentElement.classList.add('enhanced-animations');
        }
      });
      
      // Advanced interactions for high-bandwidth users
      await progressiveEnhancer.enhance('highBandwidth', async () => {
        const connection = (navigator as any).connection;
        if (connection?.effectiveType === '4g' && connection?.downlink > 2) {
          // Load enhanced interactions
          const interactionsModule = await import('../utils/advancedInteractions.js').catch(() => null);
          if (interactionsModule) {
            document.documentElement.classList.add('enhanced-interactions');
          }
        }
      });
      
      // WebGL effects for capable devices
      await progressiveEnhancer.enhance('webgl', async () => {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        
        if (gl) {
          const effectsModule = await import('../effects/webgl-effects.js').catch(() => null);
          if (effectsModule) {
            document.documentElement.classList.add('webgl-enhanced');
          }
        }
      });
      
      // Service Worker enhancements
      await progressiveEnhancer.enhance('serviceWorker', async () => {
        if ('serviceWorker' in navigator) {
          // Advanced caching strategies
          const advancedCachingModule = await import('../utils/advancedCaching.js').catch(() => null);
          if (advancedCachingModule) {
            console.log('Advanced caching strategies loaded');
          }
        }
      });
    }
    
    // Cleanup method
    destroy(): void {
      if (this.performanceObserver) {
        this.performanceObserver.disconnect();
      }
    }
  }
  
  // Connection quality aware loading
  class ConnectionAwareLoader {
    private connection: any;
    
    constructor() {
      this.connection = (navigator as any).connection;
      this.setupConnectionMonitoring();
    }
    
    private setupConnectionMonitoring(): void {
      if (this.connection) {
        this.connection.addEventListener('change', () => {
          this.adjustLoadingStrategy();
        });
        
        // Initial adjustment
        this.adjustLoadingStrategy();
      }
    }
    
    private adjustLoadingStrategy(): void {
      if (!this.connection) return;
      
      const { effectiveType, downlink, saveData } = this.connection;
      
      // Data saver mode
      if (saveData) {
        document.documentElement.classList.add('data-saver');
        this.enableDataSaverMode();
        return;
      }
      
      // Slow connection
      if (effectiveType === 'slow-2g' || effectiveType === '2g') {
        document.documentElement.classList.add('slow-connection');
        this.enableLowBandwidthMode();
      }
      
      // Fast connection
      else if (effectiveType === '4g' && downlink > 2) {
        document.documentElement.classList.add('fast-connection');
        this.enableHighBandwidthMode();
      }
    }
    
    private enableDataSaverMode(): void {
      // Disable non-essential animations
      document.documentElement.style.setProperty('--animation-duration', '0s');
      
      // Skip non-critical resource loading
      console.log('Data saver mode enabled - optimizing for minimal data usage');
    }
    
    private enableLowBandwidthMode(): void {
      // Reduce image quality
      document.querySelectorAll('img').forEach(img => {
        const src = img.src;
        if (src.includes('?')) {
          img.src = src.replace(/q=\d+/, 'q=50');
        }
      });
      
      console.log('Low bandwidth mode enabled');
    }
    
    private enableHighBandwidthMode(): void {
      // Preload additional resources
      const prefetchLinks = [
        '/blog/',
        '/resume/',
        '/_astro/enhanced-features.js',
      ];
      
      prefetchLinks.forEach(href => {
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = href;
        document.head.appendChild(link);
      });
      
      console.log('High bandwidth mode enabled - preloading additional resources');
    }
  }
  
  // Memory usage monitoring
  class MemoryMonitor {
    private checkInterval: number = 0;
    
    start(): void {
      if ('memory' in performance) {
        this.checkInterval = window.setInterval(() => {
          const memory = (performance as any).memory;
          const used = memory.usedJSHeapSize / 1048576; // MB
          const limit = memory.jsHeapSizeLimit / 1048576; // MB
          
          // If memory usage is high, trigger cleanup
          if (used / limit > 0.8) {
            this.triggerCleanup();
          }
        }, 30000); // Check every 30 seconds
      }
    }
    
    private triggerCleanup(): void {
      // Force garbage collection if available
      if ('gc' in window) {
        (window as any).gc();
      }
      
      // Clear unnecessary caches
      if ('caches' in window) {
        caches.keys().then(names => {
          names.forEach(name => {
            if (name.includes('old-') || name.includes('temp-')) {
              caches.delete(name);
            }
          });
        });
      }
      
      console.log('Memory cleanup triggered');
    }
    
    stop(): void {
      if (this.checkInterval) {
        clearInterval(this.checkInterval);
      }
    }
  }
  
  // Initialize optimizations
  let bundleOptimizer: BundleOptimizer;
  let connectionLoader: ConnectionAwareLoader;
  let memoryMonitor: MemoryMonitor;
  
  // Start optimization when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeOptimizations);
  } else {
    initializeOptimizations();
  }
  
  function initializeOptimizations(): void {
    bundleOptimizer = new BundleOptimizer();
    connectionLoader = new ConnectionAwareLoader();
    memoryMonitor = new MemoryMonitor();
    
    memoryMonitor.start();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      bundleOptimizer?.destroy();
      memoryMonitor?.stop();
    });
  }
  
  // Expose global optimization controls
  window.__bundleOptimizer = {
    getAnalytics: () => bundleAnalyzer.getAnalytics(),
    reportBundle: () => bundleAnalyzer.report(),
    isFeatureLoaded: (feature: string) => progressiveEnhancer.isLoaded(feature),
  };
</script>

<style>
  /* Data saver mode optimizations */
  .data-saver * {
    animation-duration: 0s !important;
    transition-duration: 0s !important;
  }
  
  .data-saver .animate-matrix,
  .data-saver .animate-scan-line,
  .data-saver .animate-glitch {
    animation: none !important;
  }
  
  /* Slow connection optimizations */
  .slow-connection img {
    image-rendering: optimizeSpeed;
  }
  
  .slow-connection .image-container::before {
    display: none; /* Skip decorative effects */
  }
  
  /* Fast connection enhancements */
  .fast-connection.enhanced-animations .animate-matrix {
    animation-duration: 15s; /* Faster animations */
  }
  
  .fast-connection.enhanced-interactions :hover {
    transition: all 0.2s ease-out;
  }
  
  /* WebGL enhanced effects */
  .webgl-enhanced .image-container {
    position: relative;
    overflow: hidden;
  }
  
  .webgl-enhanced .image-container::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at var(--mouse-x, 50%) var(--mouse-y, 50%), 
                              rgba(0, 255, 0, 0.1) 0%, 
                              transparent 50%);
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .webgl-enhanced .image-container:hover::after {
    opacity: 1;
  }
</style>