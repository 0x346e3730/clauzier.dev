---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import TerminalPrompt from '../../components/TerminalPrompt.astro';

interface Props {
  post: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post: CollectionEntry<'blog'>) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

// Redirect external posts
if (post.data.external) {
  return Astro.redirect(post.data.external.url);
}

const { Content } = await post.render();

// Format date for meta tags
const formattedDate = post.data.pubDate.toISOString();
const readableDate = post.data.pubDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Prepare meta description
const metaDescription = post.data.description || `Read ${post.data.title} by Antonin CLAUZIER`;
---

<Layout 
  pageTitle={`Antonin CLAUZIER - Blog - ${post.data.title}`}
>
  <TerminalPrompt command={`cat ${post.slug}.md`} />

  <article class="prose prose-invert prose-hacker mt-8 prose-headings:font-bold prose-a:no-underline" itemscope itemtype="http://schema.org/BlogPosting">
    <meta itemprop="datePublished" content={formattedDate} />
    <meta itemprop="dateModified" content={formattedDate} />
    <meta itemprop="author" content="Antonin CLAUZIER" />
    <meta itemprop="description" content={metaDescription} />
    <meta itemprop="url" content={Astro.url.href} />
    {post.data.tags && <meta itemprop="keywords" content={post.data.tags.join(', ')} />}

    <h1 class="text-2xl sm:text-3xl font-bold mb-4 break-words" itemprop="headline">{post.data.title}</h1>
    <div class="mb-8 text-sm metadata">
      <time datetime={formattedDate} itemprop="datePublished">{readableDate}</time>
      {post.data.tags && (
        <div class="mt-2 flex flex-wrap gap-2" role="list" aria-label="Post tags">
          {post.data.tags.map((tag: string) => (
            <span class="text-hacker-secondary tag" role="listitem">#{tag}</span>
          ))}
        </div>
      )}
    </div>
    <div itemprop="articleBody">
      <Content />
    </div>
  </article>
</Layout>

<style>
  /* Style markdown content */
  :global(.prose-hacker) {
    --tw-prose-invert-body: var(--hacker-primary);
    --tw-prose-invert-headings: var(--hacker-primary);
    --tw-prose-invert-links: var(--hacker-secondary);
    --tw-prose-invert-bold: var(--hacker-primary);
    --tw-prose-invert-counters: var(--hacker-primary);
    --tw-prose-invert-bullets: var(--hacker-primary);
    --tw-prose-invert-hr: var(--hacker-primary);
    --tw-prose-invert-quotes: var(--hacker-primary);
    --tw-prose-invert-quote-borders: var(--hacker-secondary);
    --tw-prose-invert-captions: var(--hacker-primary);
    --tw-prose-invert-code: var(--hacker-primary);
    --tw-prose-invert-pre-code: var(--hacker-primary);
    --tw-prose-invert-pre-bg: var(--hacker-terminal);
    --tw-prose-invert-th-borders: var(--hacker-secondary);
    --tw-prose-invert-td-borders: var(--hacker-primary);
  }

  /* Ensure code blocks don't overflow on mobile */
  :global(.prose pre) {
    overflow-x: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
    padding: 1rem;
    border-radius: 0.25rem;
    border: 1px solid var(--hacker-primary);
  }

  :global(.prose img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.25rem;
    border: 1px solid var(--hacker-primary);
  }

  :global(.prose a:hover) {
    color: var(--hacker-primary) !important;
    text-shadow: 0 0 8px rgba(0, 255, 0, 0.8);
  }

  /* Optimize table display */
  :global(.prose table) {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }

  :global(.prose th), :global(.prose td) {
    padding: 0.75rem;
    border: 1px solid var(--hacker-primary);
  }

  :global(.prose blockquote) {
    font-style: italic;
    border-left-width: 0.25rem;
    padding-left: 1rem;
    margin: 1.5rem 0;
  }

  /* Optimize lists */
  :global(.prose ul), :global(.prose ol) {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
  }

  :global(.prose li) {
    margin: 0.5rem 0;
  }

  /* Optimize headings */
  :global(.prose h2), :global(.prose h3), :global(.prose h4) {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  /* Optimize inline code */
  :global(.prose code:not(pre code)) {
    padding: 0.2em 0.4em;
    background-color: rgba(0, 255, 0, 0.1);
    border-radius: 0.25rem;
  }
</style> 